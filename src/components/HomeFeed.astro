---
import type { CollectionEntry } from "astro:content";
import PostMeta from "@/components/reusable/PostMeta.astro";

type BlogEntry = CollectionEntry<"blog">;
interface ProcessedPost extends BlogEntry {
    wordCount: number;
    readingTime: number;
}

interface Props {
    posts: BlogEntry[];
    // page: number;
    // total: number;
}

const { posts } = Astro.props as Props;

const processedPosts: ProcessedPost[] = await Promise.all(
    posts.map(async (post) => {
        const len = post.body.split(/\s+/).length;
        const time = Math.floor(len / 130);

        return {
            ...post,
            wordCount: len,
            readingTime: time > 0 ? time : 1,
        };
    }),
);
---

<div class="wrapper">
    {
        processedPosts.map((post, i) => (
            <Fragment key={i}>
                <div class="card post">
                    <a href={`/post/${post.slug}`}>
                        <img
                            src={`/blog/${post.slug}/cover.jpg`}
                            alt={`Cover image of ${post.slug}`}
                        />
                    </a>
                    <div class="body">
                        <div>
                            <a
                                class="ghost link heading"
                                href={`/post/${post.slug}`}
                            >
                                <h1>{post.data.title}</h1>
                            </a>
                            <PostMeta post={post} />
                        </div>
                        <div>
                            <p style="text-overflow: hidden;">
                                {post.data.description}
                            </p>
                            <p style="color: var(--muted-color);">
                                {post.wordCount} words | {post.readingTime}
                                {"   "}
                                minute(s)
                            </p>
                        </div>
                    </div>
                </div>
            </Fragment>
        ))
    }
</div>

<style is:inline>
    .wrapper {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .wrapper .post {
        display: flex;
        flex-direction: row;
    }

    .wrapper .post .body {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 12rem;
        padding: 0.75rem;
    }

    .wrapper .post img {
        position: absolute;
        top: 0;
        right: 0;
        height: 15rem;
        border-radius: var(--border-rounded);
        border-top-left-radius: 0;
        clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 12% 100%);
        filter: grayscale(1);
        transition: filter 0.2s;
    }

    .wrapper .post img:hover {
        filter: grayscale(0);
    }

    @media (max-width: 56rem) {
        .wrapper .post {
            flex-direction: column;
            width: 80vw;
            @media (max-width: 32rem) {
                width: auto;
            }
            margin-inline: auto;
            border-radius: var(--border-rounded);
            overflow: hidden;
        }

        .wrapper .post .body {
            height: auto;
        }

        .wrapper .post img {
            position: relative;
            top: -0.75rem;
            left: -0.75rem;
            width: calc(100% + 1.5rem);
            height: auto;
            clip-path: none;
            filter: none;
        }
    }
</style>
