---
import { links } from "@/config";
import { Icon } from "astro-icon/components";
import MobileMenu from "./MobileMenu.astro";
import ThemeMenu from "./ThemeMenu.astro";
---

<nav class="card">
    <MobileMenu />
    <a href="/" class="ghost link logo">
        <Icon name="logo" width="3.5rem" height="3.5rem" />
    </a>
    <div class="links-wrapper">
        {
            links.nav.map((link) => (
                <a class="ghost link" href={link.href}>
                    /{link.name}
                </a>
            ))
        }
    </div>
    <ThemeMenu />
</nav>

<style>
    nav {
        margin-inline: auto;
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin: 0 0 52vh;
        height: 4.5rem;
        padding: 0 1rem;
        border-radius: 0;
        border-end-end-radius: var(--border-rounded);
        border-end-start-radius: var(--border-rounded);
    }

    .logo {
        height: 1.8rem;
        width: auto;
        color: var(--primary-color);
    }

    .logo svg {
        position: relative;
        bottom: 50%;
    }

    .links-wrapper {
        display: flex;
        justify-content: space-between;
        padding-right: 2.5rem;
        gap: 0.5rem;
    }

    @media (max-width: 56rem) {
        .links-wrapper {
            display: none;
        }

        nav {
            margin: 0 0 20rem;
        }
    }
</style>

<script>
    // Active link highlighting
    // --- Start---
    const path = stripSlash(window.location.pathname);
    const links = document.querySelectorAll<HTMLAnchorElement>(".link");

    function stripSlash(path: string) {
        if (!path) return "";
        return path !== "/" && path.endsWith("/") ? path.slice(0, -1) : path;
    }

    function setActiveLink(activePath: string, links: NodeListOf<Element>) {
        const normalized = stripSlash(activePath);
        links.forEach((link) => {
            const href = stripSlash(link.getAttribute("href") || "");
            if (href === normalized) {
                link.classList.add("active");
            } else {
                link.classList.remove("active");
            }
        });
    }

    setActiveLink(path, links);

    links.forEach((link) => {
        link.addEventListener("click", (e) => {
            if (link.classList.contains("active")) e.preventDefault();

            const href = link.getAttribute("href");
            if (href) setActiveLink(href, links);
        });
    });
    // --- End ---
</script>
